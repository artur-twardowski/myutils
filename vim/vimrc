set nocompatible
syntax on
set nowrap
set encoding=utf8
set hidden
set number
set ruler
set tabstop=4
set shiftwidth=4
set notimeout
set nottimeout
set smarttab
set expandtab
set listchars=tab:»·,space:·,extends:→,precedes:←,nbsp:_
set list
set showcmd
set laststatus=2
set report=0
set cursorline
set hlsearch

" Installation of plugins
filetype off
call plug#begin()
Plug 'scrooloose/nerdtree'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-tags.vim'
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'mattn/vim-lsp-settings'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'fholgado/minibufexpl.vim'
Plug 'preservim/tagbar'
Plug 'Yohannfra/Vim-Vim-Project'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
call plug#end()
filetype plugin indent on

packadd termdebug

function! ToggleConceal()
    if &conceallevel == 1
        set conceallevel=0
        echom "Ligatures disabled"
    else
        set conceallevel=1
        echom "Ligatures enabled"
    endif
endfunction

function! ToggleConcealCursor()
    if &concealcursor == ""
        set concealcursor="nc"
    else
        set concealcursor=""
    endif
endfunction

function ChangeLineSpacing(amount)
    let spacing = &lsp + a:amount
    let &lsp=spacing
    echom "Line spacing set to " &lsp
endfunction

function! QuickfixGrep()
    let l:str = input("Search for: ")
    if l:str != ""
        :exec 'vimgrep /' . l:str . '/ ' . expand('%')
        :copen
    endif
endfunction

function! ToggleExpandtab()
    if &expandtab
        :set noexpandtab
        echom "TAB key will insert a tabulator"
    else
        :set expandtab
        echom "TAB key will insert spaces"
    endif
endfunction

function! ToggleFolding()
    if &foldmethod == "manual"
        set foldmethod=syntax
        echom "Folding based on syntax"
    elseif &foldmethod == "syntax"
        set foldmethod=marker
        echom "Folding based on markers: " &foldmarker
    elseif &foldmethod == "marker"
        set foldmethod=indent
        echom "Folding based on indentation"
    else
        set foldmethod=manual
        echom "Folding defined manually only"
    endif
endfunction

function! ToggleLineNumbers()
    if &number
        if &relativenumber
            set nonumber
            set norelativenumber
            echom "Line numbers disabled"
        else
            set relativenumber
            echom "Line numbers enabled (relative)"
        endif
    else
        set number
        set norelativenumber
        echom "Line numbers enabled (absolute)"
    endif
endfunction

function! ToggleSigns()
    if &signcolumn == "no"
        set signcolumn=auto
        echom "Signs in gutter enabled if there is anything to show"
    elseif &signcolumn == "auto"
        set signcolumn=yes
        echom "Signs in gutter enabled"
    elseif &signcolumn == "yes"
        set signcolumn=no
        echom "Signs in gutter off"
    endif
endfunction

function! SetRawDisplay()
    set signcolumn=no
    set nonumber
    set norelativenumber
    set nolist
endfunction

function! SetDefaultDisplay()
    set signcolumn=yes
    set number
    set norelativenumber
    set list
endfunction

function! LoadProject()
    let g:vimproject_file = findfile(".vimproject", ".;")
    if g:vimproject_file != ""
        exec "source " . g:vimproject_file
        let g:vimproject_build_abspath = fnamemodify(g:vimproject_file, ":h") . "/" . g:vimproject_build_directory
        let g:vimproject_run_abspath = fnamemodify(g:vimproject_file, ":h") .  "/" . g:vimproject_run_directory
        let l:msg = "Now working on project " . g:vimproject_name . " ("
        exec "set makeprg=" . g:vimproject_makeprg
        exec "set colorcolumn=" . g:vimproject_colorcolumn
        exec "set tabstop=" . g:vimproject_indentation_size
        exec "set shiftwidth=" . g:vimproject_indentation_size
        if g:vimproject_indentation_tabs == 1
            set noexpandtab
            let l:msg = l:msg . "tabulations, "
        else
            set expandtab
            let l:msg = l:msg . "spaces, "
        endif
        let l:msg = l:msg . "indent size: " . g:vimproject_indentation_size . ")"
        echom l:msg
    else
        echom "No project file"
        let g:vimproject_name = ""
    endif
endfunction

function! MakeProject(prompt_args)
    if g:vimproject_file == ""
        echom "No active project"
        return
    else
        if a:prompt_args == 1
            let l:args = input("Execute: " . &makeprg . " ", g:vimproject_makeprg_args)
        else
            let l:args = g:vimproject_makeprg_args
        endif
        exec "cd " . g:vimproject_build_abspath
        exec "make " . l:args
        exec "cd -"
    endif
endfunction

function! RunProject(prompt_args)
    if g:vimproject_file == ""
        echom "No active project"
        return
    else
        if a:prompt_args == 1
            let l:args = input("Execute: " . g:vimproject_run_command . " ")
        else
            let l:args = ""
        endif
        exec "cd " . g:vimproject_run_abspath
        exec "!" . g:vimproject_run_command . " " . l:args
        exec "cd -"
    endif
endfunction

function! PrintCurrentFilePath()
    if g:vimproject_file == ""
        echo expand('%')
    else
        echo g:vimproject_name . ": " . expand('%')
    endif
endfunction

if has("gui_running")
    if has("gui_gtk2") || has("gui_gtk3")
        set guifont=JetBrains\ Mono\ Medium\ 12
        set lsp=0
    elseif has("gui_win32")
        set guifont=JetBrains\ Mono\ Medium:h12
        set lsp=0
    endif
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
endif

set completeopt=menuone,popup

if &term == "tmux-256color"
    set term=xterm-256color
endif

" Keys
nnoremap <C-k>      :bp<CR>
nnoremap <C-j>      :bn<CR>
nnoremap <C-h>      :tabprevious<CR>
nnoremap <C-l>      :tabnext<CR>

" Ctrl-B + ...
nnoremap <C-b>e     :LspDocumentDiagnostics<CR>
nnoremap <C-b>r     :LspRename<CR>
nnoremap <C-b>t     :TagbarToggle<CR>
nnoremap <C-b>i     :LspImplementation<CR>
nnoremap <C-b>o     :LspPeekDeclaration<CR>

nnoremap <C-b>d     :LspDeclaration<CR>
nnoremap <C-b>f     :LspCodeAction<CR>
nnoremap <C-b>h     :LspDocumentSwitchSourceHeader<CR>
nnoremap <C-b>j     :LspReferences<CR>

nnoremap <C-b>b     :LspDefinition<CR>

nmap     <C-b><C-r>    <C-b>r
nnoremap <C-b><C-t>    <C-b>t
nmap     <C-b><C-d>    <C-b>d
nmap     <C-b><C-j>    <C-b>j
nmap     <C-b><C-b>    <C-b>b

" Ctrl-X + ...
nnoremap <C-x>!     :new \| r!

nnoremap <C-x><TAB> :call ToggleExpandtab()<CR>
nnoremap <C-x>q     :bd<CR>
nnoremap <C-x>Q     :bd!<CR>
nnoremap <C-x>w     :set list!<CR>
nnoremap <C-x>W     :set wrap!<CR>
nnoremap <C-x>e     :bro e<CR>
nnoremap <C-x>E     :tabnew<CR>:bro e<CR>
nnoremap <C-x>r     :call RunProject(0)<CR>
nnoremap <C-x>R     :call RunProject(1)<CR>
nnoremap <C-x>y     :call SetRawDisplay()<CR>
nnoremap <C-x>Y     :call SetDefaultDisplay()<CR>
"unused  <C-x>u
"unused  <C-x>U
"unused  <C-x>i
"unused  <C-x>I
"unused  <C-x>o
"unused  <C-x>O
nnoremap <C-x>p     :call LoadProject()<CR>
"unused  <C-x>P
nnoremap <C-x>[     :call ToggleFolding()<CR>

nnoremap <C-x>a     :call ToggleLineNumbers()<CR>
"unused  <C-x>A
"unused  <C-x>s
nnoremap <C-x>S     :so ~/.vimrc<CR>
"unused  <C-x>d
"unused  <C-x>D
nnoremap <C-x>f     :NERDTreeToggle<CR>
nnoremap <C-x>F     :NERDTreeToggleVCS<CR>
nnoremap <C-x>g     :%!clang-format<CR>
vnoremap <C-x>g     :!clang-format<CR>
"unused  <C-x>G
"unused  <C-x>h
nnoremap <C-x>H     :set cursorline!<CR>
nnoremap <C-x>j     :let g:miniBufExplCloseOnSelect=1<CR>:MBEOpen<CR>:MBEFocus<CR>
nnoremap <C-x>J     :let g:miniBufExplCloseOnSelect=0<CR>:MBEToggle<CR>:MBEFocus<CR>
nnoremap <C-x>k     :call PrintCurrentFilePath()<CR>
"unused  <C-x>K
nnoremap <C-x>l     :set colorcolumn=<C-R>=&colorcolumn<CR>
nnoremap <C-x>L     :call ToggleConceal()<CR>

nnoremap <C-x>z     :call ToggleSigns()<CR>
"unused  <C-x>Z
"unused  <C-x>x
"unused  <C-x>X
"unused  <C-x>c
nnoremap <C-x>C     :e ~/.vimrc<CR>
"unused  <C-x>v
"unused  <C-x>V
nnoremap <C-x>b     :call MakeProject(0)<CR>
nnoremap <C-x>B     :call MakeProject(1)<CR>
nnoremap <C-x>n     :enew<CR>
nnoremap <C-x>N     :tabnew<CR>
"unused  <C-x>m
"unused  <C-x>M
nnoremap <C-x>/     :call QuickfixGrep()<CR>

nnoremap [q         :cprev<CR>
nnoremap ]q         :cnext<CR>
nnoremap [Q         :cfirst<CR>
nnoremap ]Q         :clast<CR>
nnoremap [<C-q>     :colder<CR>
nnoremap ]<C-q>     :cnewer<CR>
nnoremap [t         :tabprevious<CR>
nnoremap ]t         :tabnext<CR>

nnoremap [b         :bp<CR>
nnoremap ]b         :bn<CR>

inoremap <C-w>      <C-o><C-w>

nmap     <C-x><C-q>    <C-x>q
nmap     <C-x><C-w>    <C-x>w
nmap     <C-x><C-e>    <C-x>e
nnoremap <C-x><C-r>    <C-x>r
nmap     <C-x><C-y>    <C-x>y
nmap     <C-x><C-f>    <C-x>f
nnoremap <C-x><C-g>    <C-x>g
vnoremap <C-x><C-g>    <C-x>g
nmap     <C-x><C-j>    <C-x>j
nnoremap <C-x><C-k>    <C-x>k
nnoremap <C-x><C-b>    <C-x>b
nmap     <C-x><C-n>    <C-x>n
nnoremap <C-x><C-p>    <C-x>p

nnoremap <F12>      :term bash<CR>
nnoremap <S-F12>    :!bash<CR>
nnoremap <F24>      :!bash<CR>

" g<TAB>: switch between tabs and spaces

" gc...: various custom ops
" gca: apply configuration
" gce: edit configuration file
" gco: select colorscheme
"
" gcd...: calculations and other data ops
" gcda, gcdA: calculate average of numbers, replace (gcda) or print (gcdA)
" gcds, gcdS: calculate sum of numbers
"
" gcx...: hex editor
" gcxx: raw data to hex (xxd -g1)
" gcxb: raw data to binary (xxd -b -g4)
" gcxr: hex/binary to raw data (xxd -r)
" gcxi: raw data to hex, customize command
"
nnoremap gco        :colorscheme <C-d>
noremap  gcds       :!awk '{ s += $1 } END { print s }'<CR>
noremap  gcdS       :!awk '{ s += $1 } END { print s }'<CR>y$u:echo "Sum = <C-r>""<CR>
noremap  gcda       :!awk '{ s += $1; c += 1 } END { print s/c }'<CR>
noremap  gcdA       :!awk '{ s += $1; c += 1 } END { print s/c }'<CR>y$u:echo "Average = <C-r>""<CR>
nnoremap gcxx       :%!xxd -g1<CR>
nnoremap gcxb       :%!xxd -b -g1 -c4<CR>
nnoremap gcxr       :%!xxd -r<CR>
nnoremap gcxi       :%!xxd 

vnoremap <TAB>      >gv
vnoremap <S-TAB>    <gv

inoremap <S-Up>     <ESC>v<Up>
inoremap <S-Down>   <ESC>v<Down>
inoremap <S-Left>   <ESC>v<Left>
inoremap <S-Right>  <ESC>v<Right>
nnoremap <S-Up>     v<Up>
nnoremap <S-Down>   v<Down>
nnoremap <S-Left>   v<Left>
nnoremap <S-Right>  v<Right>
vnoremap <S-Up>     <Up>
vnoremap <S-Down>   <Down>
vnoremap <S-Left>   <Left>
vnoremap <S-Right>  <Right>
map <Down>          gj
map <Up>            gk


if (has("termguicolors"))
    set termguicolors
endif

set t_Co=256
set background=dark
silent! colorscheme spacegray-mod
let g:specegray_underline_search = 1
let g:spacegray_italicize_comments = 1

let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1
let g:airline_theme='term'

let g:airline_mode_map = {
      \ '__'     : '-',
      \ 'c'      : 'C',
      \ 'i'      : 'I',
      \ 'ic'     : 'IC',
      \ 'ix'     : 'IX',
      \ 'n'      : 'N',
      \ 'multi'  : 'M',
      \ 'ni'     : 'NI',
      \ 'no'     : 'NO',
      \ 'R'      : 'R',
      \ 'Rv'     : 'RV',
      \ 's'      : 's',
      \ 'S'      : 'S',
      \ ''     : 'SB',
      \ 't'      : 't',
      \ 'v'      : 'V',
      \ 'V'      : 'VL',
      \ ''     : 'VB',
      \ }

let g:airline_section_b="%<%<%{bufnr('%')}: %#__restore#%{fnamemodify(expand('%'),':t')}%m%#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#%#__accent_bold#%#__restore__#%#__accent_bold#%{airline#util#wrap(airline#extensions#lsp#progress(),0)}%#__restore__#"
let g:airline_section_c="%{airline#util#wrap(airline#extensions#branch#get_head(),80)}"
let g:airline_section_x="%{airline#util#wrap(airline#parts#filetype(),0)}"
let g:airline_section_z="%l:%v %{g:airline_symbols.maxlinenr}%p%%"

let g:asyncomplete_auto_completeopt = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_echo_delay = 100
let g:lsp_diagnostics_virtual_text_enabled = 0

let g:miniBufExplVSplit = 30
let g:miniBufExplAutoStart = 0
let g:miniBufExplAutoStart = 0
let g:miniBufExplCloseOnSelect = 0

call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'allowlist': ['*'],
    \ 'blocklist': ['go'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ 'config': {
        \    'max_buffer_size': 5000000,
    \  },
    \ }))

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'allowlist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

inoremap <expr> <Up> pumvisible() ? '<C-e><Up>' : '<Up>'
inoremap <expr> <Down> pumvisible() ? '<C-y><Down>' : '<Down>'

