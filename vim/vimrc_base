set nocompatible
syntax on
set nowrap
set encoding=utf8
set hidden
set number
set ruler
set tabstop=4
set shiftwidth=4
set notimeout
set nottimeout
set smarttab
set expandtab
set listchars=tab:»·,space:·,extends:→,precedes:←,nbsp:_
set list
set showcmd
set laststatus=2
set report=0
set cursorline
set hlsearch

function! ToggleConceal()
    if &conceallevel == 1
        set conceallevel=0
        echom "Ligatures disabled"
    else
        set conceallevel=1
        echom "Ligatures enabled"
    endif
endfunction

function! ToggleConcealCursor()
    if &concealcursor == ""
        set concealcursor="nc"
    else
        set concealcursor=""
    endif
endfunction

function ChangeLineSpacing(amount)
    let spacing = &lsp + a:amount
    let &lsp=spacing
    echom "Line spacing set to " &lsp
endfunction

function! QuickfixGrep()
    let l:str = input("Search for: ")
    if l:str != ""
        :exec 'vimgrep /' . l:str . '/ ' . expand('%')
        :copen
    endif
endfunction

function! ToggleExpandtab()
    if &expandtab
        :set noexpandtab
        echom "TAB key will insert a tabulator"
    else
        :set expandtab
        echom "TAB key will insert spaces"
    endif
endfunction

function! ToggleFolding()
    if &foldmethod == "manual"
        set foldmethod=syntax
        echom "Folding based on syntax"
    elseif &foldmethod == "syntax"
        set foldmethod=marker
        echom "Folding based on markers: " &foldmarker
    elseif &foldmethod == "marker"
        set foldmethod=indent
        echom "Folding based on indentation"
    else
        set foldmethod=manual
        echom "Folding defined manually only"
    endif
endfunction

function! ToggleLineNumbers()
    if &number
        if &relativenumber
            set nonumber
            set norelativenumber
            echom "Line numbers disabled"
        else
            set relativenumber
            echom "Line numbers enabled (relative)"
        endif
    else
        set number
        set norelativenumber
        echom "Line numbers enabled (absolute)"
    endif
endfunction

function! ToggleSigns()
    if &signcolumn == "no"
        set signcolumn=auto
        echom "Signs in gutter enabled if there is anything to show"
    elseif &signcolumn == "auto"
        set signcolumn=yes
        echom "Signs in gutter enabled"
    elseif &signcolumn == "yes"
        set signcolumn=no
        echom "Signs in gutter off"
    endif
endfunction

function! YankModeEnable()
    set signcolumn=no
    set nonumber
    set norelativenumber
    set nolist
endfunction

function! YankModeDisable()
    set signcolumn=yes
    set number
    set norelativenumber
    set list
endfunction

if has("gui_running")
    if has("gui_gtk2") || has("gui_gtk3")
        set guifont=DejaVu\ Sans\ Mono\ 12
        set lsp=4
    elseif has("gui_win32")
        set guifont=Consolas:h12
        set lsp=0
    endif
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r

    nnoremap <F7> :call ChangeLineSpacing(-2)<CR>
    nnoremap <F8> :call ChangeLineSpacing(2)<CR>
    nnoremap <M-F7>        :set guifont=*<CR>
endif

function! LoadProject()
    let g:vimproject_file = findfile(".vimproject", ".;")
    if g:vimproject_file != ""
        exec "source " . g:vimproject_file
        let g:vimproject_build_abspath = fnamemodify(g:vimproject_file, ":h") . "/" . g:vimproject_build_directory
        let g:vimproject_run_abspath = fnamemodify(g:vimproject_file, ":h") .  "/" . g:vimproject_run_directory
        let l:msg = "Now working on project " . g:vimproject_name . " ("
        exec "set makeprg=" . g:vimproject_makeprg
        exec "set colorcolumn=" . g:vimproject_colorcolumn
        exec "set tabstop=" . g:vimproject_indentation_size
        exec "set shiftwidth=" . g:vimproject_indentation_size
        if g:vimproject_indentation_tabs == 1
            set noexpandtab
            let l:msg = l:msg . "tabulations, "
        else
            set expandtab
            let l:msg = l:msg . "spaces, "
        endif
        let l:msg = l:msg . "indent size: " . g:vimproject_indentation_size . ")"
        echom l:msg
    else
        echom "No project file"
        let g:vimproject_name = ""
    endif
endfunction

function! MakeProject(prompt_args)
    if g:vimproject_file == ""
        echom "No active project"
        return
    else
        if a:prompt_args == 1
            let l:args = input("Execute: " . &makeprg . " ", g:vimproject_makeprg_args)
        else
            let l:args = g:vimproject_makeprg_args
        endif
        exec "cd " . g:vimproject_build_abspath
        exec "make " . l:args
        exec "cd -"
    endif
endfunction

function! RunProject(prompt_args)
    if g:vimproject_file == ""
        echom "No active project"
        return
    else
        if a:prompt_args == 1
            let l:args = input("Execute: " . g:vimproject_run_command . " ")
        else
            let l:args = ""
        endif
        exec "cd " . g:vimproject_run_abspath
        exec "!" . g:vimproject_run_command . " " . l:args
        exec "cd -"
    endif
endfunction

function! PrintCurrentFilePath()
    if g:vimproject_file == ""
        echo expand('%')
    else
        echo g:vimproject_name . ": " . expand('%')
    endif
endfunction


#ifdef NEOVIM
set completeopt=menuone
#else
set completeopt=menuone,popup
#endif

packadd termdebug

if &term == "tmux-256color"
    set term=xterm-256color
endif

" Ctrl-J, Ctrl-K: navigate buffers
" [b, ]b: same as above
" Ctrl-H, Ctrl-L: navigate tabs
" [t, ]t: same as above
nnoremap <C-k>      :bp<CR>
nnoremap <C-j>      :bn<CR>
nnoremap <C-h>      :tabprevious<CR>
nnoremap <C-l>      :tabnext<CR>
nnoremap [b         :bp<CR>
nnoremap ]b         :bn<CR>
nnoremap [t         :tabprevious<CR>
nnoremap ]t         :tabnext<CR>

" Ctrl-Xq: close current buffer
nnoremap <C-x>q     :bd<CR>

" Ctrl-Xn: new buffer
" Ctrl-XN: new buffer in new tab
nnoremap <C-x>n     :enew<CR>
nnoremap <C-x>N     :tabnew<CR>

" Ctrl-Xe: open a file
" Ctrl-XE: open a file in new tab
nnoremap <C-x>e     :bro e<CR>
nnoremap <C-x>E     :tabnew<CR>:bro e<CR>

" Ctrl-XL: enable/disable ligatures
nnoremap <C-x>L     :call ToggleConceal()<CR>

" Ctrl-Xa: toggle line numbers
" Ctrl-Xz: toggle signs in gutter
" Ctrl-Xk: enable/disable presentation of whitespaces
" Ctrl-Xy: enable yank mode: disable line numbers, signs in gutter and whitespaces
" Ctrl-XY: disable yank mode: enable line numbers, signs in gutter and whitespaces
nnoremap <C-x>w     :set list!<CR>
nnoremap <C-x>a     :call ToggleLineNumbers()<CR>
nnoremap <C-x>z     :call ToggleSigns()<CR>
nnoremap <C-x>y     :call YankModeEnable()<CR>
nnoremap <C-x>Y     :call YankModeDisable()<CR>

" Ctrl-XW: toggle line wrap
nnoremap <C-x>W     :set wrap!<CR>

nmap <C-x><C-e>     <C-x>e
nmap <C-x><C-n>     <C-x>n
nmap <C-x><C-y>     <C-x>y

" Insert mode Ctrl-W - same as in normal mode (window ops)
inoremap <C-w>      <C-o><C-w>

nnoremap <C-x>g     :%!clang-format<CR>
vnoremap <C-x>g     :!clang-format<CR>
nnoremap <C-x>b     :call MakeProject(0)<CR>
nnoremap <C-x>B     :call MakeProject(1)<CR>
nnoremap <C-x>r     :call RunProject(0)<CR>
nnoremap <C-x>R     :call RunProject(1)<CR>
nnoremap <C-x>p     :call LoadProject()<CR>
nnoremap <C-x>k     :call PrintCurrentFilePath()<CR>
nnoremap <C-x><C-g> <C-x>g
vnoremap <C-x><C-g> <C-x>g
nnoremap <C-x><C-b> <C-x>b
nnoremap <C-x><C-r> <C-x>r
nnoremap <C-x><C-p> <C-x>p
nnoremap <C-x><C-k> <C-x>k

" g-F10: enable/disable highlighting of active line
nnoremap g<F10>    :set cursorline!<CR>

" Shift-F11: select colored columns
nnoremap <S-F11>    :set colorcolumn=<C-R>=&colorcolumn<CR>
nnoremap <F23>      :set colorcolumn=<C-R>=&colorcolumn<CR>

" F12: open terminal (Bash)
nnoremap <F12>      :term bash<CR>

" Shift-F12: open terminal (Bash) leaving Vim in background
nnoremap <S-F12>    :!bash<CR>
nnoremap <F24>      :!bash<CR>

" g<TAB>: switch between tabs and spaces
nnoremap g<TAB>     :call ToggleExpandtab()<CR>

" gc...: various custom ops
" gca: apply configuration
" gce: edit configuration file
" gco: select colorscheme
"
" gcd...: calculations and other data ops
" gcda, gcdA: calculate average of numbers, replace (gcda) or print (gcdA)
" gcds, gcdS: calculate sum of numbers
"
" gcx...: hex editor
" gcxx: raw data to hex (xxd -g1)
" gcxb: raw data to binary (xxd -b -g4)
" gcxr: hex/binary to raw data (xxd -r)
" gcxi: raw data to hex, customize command
"
nnoremap gca        :so ~/.vimrc<CR>
nnoremap gce        :e ~/.vimrc<CR>
nnoremap gco        :colorscheme <C-d>
noremap  gcds       :!awk '{ s += $1 } END { print s }'<CR>
noremap  gcdS       :!awk '{ s += $1 } END { print s }'<CR>y$u:echo "Sum = <C-r>""<CR>
noremap  gcda       :!awk '{ s += $1; c += 1 } END { print s/c }'<CR>
noremap  gcdA       :!awk '{ s += $1; c += 1 } END { print s/c }'<CR>y$u:echo "Average = <C-r>""<CR>
nnoremap gcxx       :%!xxd -g1<CR>
nnoremap gcxb       :%!xxd -b -g1 -c4<CR>
nnoremap gcxr       :%!xxd -r<CR>
nnoremap gcxi       :%!xxd 

" [q, ]q - navigate to previous/next quickfix list item
" [Q, ]Q - navigate to first/last quickfix list item
nnoremap [q         :cprev<CR>
nnoremap ]q         :cnext<CR>
nnoremap [Q         :cfirst<CR>
nnoremap ]Q         :clast<CR>
nnoremap [<C-q>     :colder<CR>
nnoremap ]<C-q>     :cnewer<CR>

" g!: execute a command putting its output into a new buffer
nnoremap g!         :new \| r!
" g/: QuickfixGrep - search for an expression and put the results into a
" quickfix window
nnoremap g/         :call QuickfixGrep()<CR>

vnoremap <TAB>      >gv
vnoremap <S-TAB>    <gv

inoremap <S-Up>     <ESC>v<Up>
inoremap <S-Down>   <ESC>v<Down>
inoremap <S-Left>   <ESC>v<Left>
inoremap <S-Right>  <ESC>v<Right>
nnoremap <S-Up>     v<Up>
nnoremap <S-Down>   v<Down>
nnoremap <S-Left>   v<Left>
nnoremap <S-Right>  v<Right>
vnoremap <S-Up>     <Up>
vnoremap <S-Down>   <Down>
vnoremap <S-Left>   <Left>
vnoremap <S-Right>  <Right>
map <Down>          gj
map <Up>            gk
