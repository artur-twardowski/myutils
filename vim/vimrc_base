set nocompatible
syntax on
set nowrap
set encoding=utf8
set hidden
set number
set ruler
set tabstop=4
set shiftwidth=4
set notimeout
set nottimeout
set smarttab
set expandtab
set listchars=tab:»·,space:·,extends:→,precedes:←,nbsp:_
set list
set showcmd
set laststatus=2
set report=0
set cursorline

function! ToggleConceal()
    if &conceallevel == 1
        set conceallevel=0
        echom "Ligatures disabled"
    else
        set conceallevel=1
        echom "Ligatures enabled"
    endif
endfunction

function! ToggleConcealCursor()
    if &concealcursor == ""
        set concealcursor="nc"
    else
        set concealcursor=""
    endif
endfunction

function ChangeLineSpacing(amount)
    let spacing = &lsp + a:amount
    let &lsp=spacing
    echom "Line spacing set to " &lsp
endfunction

function! QuickfixGrep()
    let l:str = input("Search for: ")
    if l:str != ""
        :exec 'vimgrep /' . l:str . '/ ' . expand('%')
        :copen
    endif
endfunction

function! ToggleExpandtab()
    if &expandtab
        :set noexpandtab
        echom "TAB key will insert a tabulator"
    else
        :set expandtab
        echom "TAB key will insert spaces"
    endif
endfunction

function! ToggleFolding()
    if &foldmethod == "manual"
        set foldmethod=syntax
        echom "Folding based on syntax"
    elseif &foldmethod == "syntax"
        set foldmethod=marker
        echom "Folding based on markers: " &foldmarker
    elseif &foldmethod == "marker"
        set foldmethod=indent
        echom "Folding based on indentation"
    else
        set foldmethod=manual
        echom "Folding defined manually only"
    endif
endfunction

if has("gui_running")
    if has("gui_gtk2") || has("gui_gtk3")
        set guifont=DejaVu\ Sans\ Mono\ 12
        set lsp=4
    elseif has("gui_win32")
        set guifont=Consolas:h12
        set lsp=0
    endif
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r

    nnoremap <F7> :call ChangeLineSpacing(-2)<CR>
    nnoremap <F8> :call ChangeLineSpacing(2)<CR>
    nnoremap <M-F7>        :set guifont=*<CR>
endif

#ifdef NEOVIM
set completeopt=menuone
#else
set completeopt=menuone,popup
#endif

packadd termdebug

" Ctrl-H, Ctrl-L: navigate buffers
" Ctrl-X: delete (close) buffer
" Ctrl-J: list buffers
nnoremap <C-h>      :bp<CR>
nnoremap <C-l>      :bn<CR>
nnoremap <C-x>      :bd<CR>
nnoremap <C-j>      :ls<CR>:b

" F8: enable/disable presentation of whitespaces
nnoremap <F8>       :set list!<CR>

" Shift-F8: change folding method
nnoremap <S-F8>     :call ToggleFolding()<CR>
nnoremap <F20>      :call ToggleFolding()<CR>

" F9: enable/disable ligatures
nnoremap <F9>       :call ToggleConceal()<CR>

" Shift-F9: enable/disable ligatures at active line
nnoremap <S-F9>     :call ToggleConcealCursor()<CR>
nnoremap <F21>      :call ToggleConcealCursor()<CR>

" F10: enable/disable line numbers
nnoremap <F10>      :set number!<CR>

" Shift-F10: enable/disable relative line numbers
nnoremap <S-F10>    :set relativenumber!<CR>
nnoremap <F22>      :set relativenumber!<CR>

" g-F10: enable/disable highlighting of active line
nnoremap g<F10>    :set cursorline!<CR>

" F11: enable/disable line wrap
nnoremap <F11>      :set wrap!<CR>

" Shift-F11: select colored columns
nnoremap <S-F11>    :set colorcolumn=<C-R>=&colorcolumn<CR>
nnoremap <F23>      :set colorcolumn=<C-R>=&colorcolumn<CR>

" F12: open terminal (Bash)
nnoremap <F12>      :term bash<CR>

" Shift-F12: open terminal (Bash) leaving Vim in background
nnoremap <S-F12>    :!bash<CR>
nnoremap <F24>      :!bash<CR>

" g<TAB>: switch between tabs and spaces
nnoremap g<TAB>     :call ToggleExpandtab()<CR>

" gc...: various custom ops
" gca: apply configuration
" gce: edit configuration file
" gco: select colorscheme
"
" gcd...: calculations and other data ops
" gcda, gcdA: calculate average of numbers, replace (gcda) or print (gcdA)
" gcds, gcdS: calculate sum of numbers
"
" gcx...: hex editor
" gcxx: raw data to hex (xxd -g1)
" gcxb: raw data to binary (xxd -b -g4)
" gcxr: hex/binary to raw data (xxd -r)
" gcxi: raw data to hex, customize command
"
nnoremap gca        :so ~/.vimrc<CR>
nnoremap gce        :e ~/.vimrc<CR>
nnoremap gco        :colorscheme <C-d>
noremap  gcds       :!awk '{ s += $1 } END { print s }'<CR>
noremap  gcdS       :!awk '{ s += $1 } END { print s }'<CR>y$u:echo "Sum = <C-r>""<CR>
noremap  gcda       :!awk '{ s += $1; c += 1 } END { print s/c }'<CR>
noremap  gcdA       :!awk '{ s += $1; c += 1 } END { print s/c }'<CR>y$u:echo "Average = <C-r>""<CR>
nnoremap gcxx       :%!xxd -g1<CR>
nnoremap gcxb       :%!xxd -b -g1 -c4<CR>
nnoremap gcxr       :%!xxd -r<CR>
nnoremap gcxi       :%!xxd 

" [q, ]q - navigate to previous/next quickfix list item
" [Q, ]Q - navigate to first/last quickfix list item
nnoremap [q         :cprev<CR>
nnoremap ]q         :cnext<CR>
nnoremap [Q         :cfirst<CR>
nnoremap ]Q         :clast<CR>

" g!: execute a command putting its output into a new buffer
nnoremap g!         :new \| r!
" g/: QuickfixGrep - search for an expression and put the results into a
" quickfix window
nnoremap g/         :call QuickfixGrep()<CR>

vnoremap <TAB>      >gv
vnoremap <S-TAB>    <gv

inoremap <S-Up>     <ESC>v<Up>
inoremap <S-Down>   <ESC>v<Down>
inoremap <S-Left>   <ESC>v<Left>
inoremap <S-Right>  <ESC>v<Right>
nnoremap <S-Up>     v<Up>
nnoremap <S-Down>   v<Down>
nnoremap <S-Left>   v<Left>
nnoremap <S-Right>  v<Right>
vnoremap <S-Up>     <Up>
vnoremap <S-Down>   <Down>
vnoremap <S-Left>   <Left>
vnoremap <S-Right>  <Right>
map <Down>          gj
map <Up>            gk
