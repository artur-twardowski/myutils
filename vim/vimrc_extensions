filetype off

call plug#begin()

Plug 'scrooloose/nerdtree'
#ifdef USE_YCM
Plug 'ycm-core/YouCompleteMe'
#endif
#ifdef USE_LSP
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-tags.vim'
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'mattn/vim-lsp-settings'
#endif
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'fholgado/minibufexpl.vim'
Plug 'preservim/tagbar'
Plug 'Yohannfra/Vim-Vim-Project'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

call plug#end()

filetype plugin indent on

if (has("termguicolors"))
    set termguicolors
endif

set t_Co=256
set background=dark
silent! colorscheme spacegray-mod
let g:specegray_underline_search = 1
let g:spacegray_italicize_comments = 1

let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 0
let g:airline_symbols_ascii = 1
let g:airline_theme='hybrid'
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 0 

#ifdef USE_YCM
let g:ycm_auto_trigger=1
#endif
#ifdef USE_LSP
let g:asyncomplete_auto_completeopt = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_echo_delay = 100
let g:lsp_diagnostics_virtual_text_enabled = 0

#endif
let g:miniBufExplVSplit = 30
let g:miniBufExplAutoStart = 0
let g:miniBufExplAutoStart = 0
let g:miniBufExplCloseOnSelect = 0

#ifdef USE_LSP
call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'allowlist': ['*'],
    \ 'blocklist': ['go'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ 'config': {
        \    'max_buffer_size': 5000000,
    \  },
    \ }))

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'allowlist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))
#endif

" Toggle buffer list on and off
" F3 - open the buffer list
" F3 - open the buffer list, close it after picking a position
nnoremap <F2>            :let g:miniBufExplCloseOnSelect=0<CR>:MBEToggle<CR>:MBEFocus<CR>
nnoremap <S-F2>          :let g:miniBufExplCloseOnSelect=1<CR>:MBEOpen<CR>:MBEFocus<CR>
nnoremap <F14>           :let g:miniBufExplCloseOnSelect=1<CR>:MBEOpen<CR>:MBEFocus<CR>

" Open NERDTree
nnoremap <F3>            :NERDTreeToggle<CR>
nnoremap <S-F3>          :NERDTreeToggleVCS<CR>
nnoremap <F15>           :NERDTreeToggleVCS<CR>

" Toggle tagbar on and off
nnoremap <F4>            :TagbarToggle<CR>

#ifdef USE_YCM
nnoremap <C-k><C-k>      :YcmCompleter GoTo<CR>
nnoremap <C-k><C-j>      :YcmCompleter GoToReferences<CR>
nnoremap <C-k><C-d><C-c> :YcmCompleter GoToDeclaration<CR>
nnoremap <C-k><C-d><C-f> :YcmCompleter GotoDefinition<CR>
nnoremap <C-k><C-r>      :YcmCompleter RefactorRename 
#endif
#ifdef USE_LSP
nnoremap <C-k><C-k>      :LspDefinition<CR>
nnoremap <C-k><C-d><C-c> :LspDeclaration<CR>
nnoremap <C-k><C-j>      :LspReferences<CR>
nnoremap <C-k><C-r>      :LspRename<CR>
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
#endif

inoremap <expr> <Up> pumvisible() ? '<C-e><Up>' : '<Up>'
inoremap <expr> <Down> pumvisible() ? '<C-y><Down>' : '<Down>'

