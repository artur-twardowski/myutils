filetype off

call plug#begin()

Plug 'scrooloose/nerdtree'
#ifdef USE_YCM
Plug 'ycm-core/YouCompleteMe'
#endif
#ifdef USE_LSP
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-tags.vim'
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'mattn/vim-lsp-settings'
#endif
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'fholgado/minibufexpl.vim'
Plug 'preservim/tagbar'
Plug 'Yohannfra/Vim-Vim-Project'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

call plug#end()

filetype plugin indent on

if (has("termguicolors"))
    set termguicolors
endif

set t_Co=256
set background=dark
silent! colorscheme spacegray-mod
let g:specegray_underline_search = 1
let g:spacegray_italicize_comments = 1

let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1
let g:airline_theme='term'

let g:airline_mode_map = {
      \ '__'     : '-',
      \ 'c'      : 'C',
      \ 'i'      : 'I',
      \ 'ic'     : 'I',
      \ 'ix'     : 'I',
      \ 'n'      : 'N',
      \ 'multi'  : 'M',
      \ 'ni'     : 'N',
      \ 'no'     : 'N',
      \ 'R'      : 'R',
      \ 'Rv'     : 'R',
      \ 's'      : 'S',
      \ 'S'      : 'SL',
      \ ''     : 'SB',
      \ 't'      : 'T',
      \ 'v'      : 'V',
      \ 'V'      : 'VL',
      \ ''     : 'VB',
      \ }

let g:airline_section_b="%<%<%{%airline#extensions#fugitiveline#bufname()%}%#__accent_blue#:%l|%v%#__restore# %m%#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#%#__accent_bold#%#__restore__#%#__accent_bold#%{airline#util#wrap(airline#extensions#lsp#progress(),0)}%#__restore__#"
let g:airline_section_c="%{airline#util#wrap(airline#extensions#branch#get_head(),80)}"
let g:airline_section_x="%{airline#util#wrap(airline#parts#filetype(),0)}"
let g:airline_section_z="%p%%%{g:airline_symbols.maxlinenr}%L"

#ifdef USE_YCM
let g:ycm_auto_trigger=1
#endif
#ifdef USE_LSP
let g:asyncomplete_auto_completeopt = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_echo_delay = 100
let g:lsp_diagnostics_virtual_text_enabled = 0

#endif
let g:miniBufExplVSplit = 30
let g:miniBufExplAutoStart = 0
let g:miniBufExplAutoStart = 0
let g:miniBufExplCloseOnSelect = 0

#ifdef USE_LSP
call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'allowlist': ['*'],
    \ 'blocklist': ['go'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ 'config': {
        \    'max_buffer_size': 5000000,
    \  },
    \ }))

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'allowlist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))
#endif

" Toggle buffer list on and off
" Ctrl-Xj - open the buffer list, close it after picking a position
" Ctrl-XJ - open the buffer list persistently
nnoremap <C-x>J          :let g:miniBufExplCloseOnSelect=0<CR>:MBEToggle<CR>:MBEFocus<CR>
nnoremap <C-x>j          :let g:miniBufExplCloseOnSelect=1<CR>:MBEOpen<CR>:MBEFocus<CR>
nmap <C-x><C-j>          <C-x>j

" Open NERDTree
nnoremap <C-x>f          :NERDTreeToggle<CR>
nnoremap <C-x>F          :NERDTreeToggleVCS<CR>
nmap <C-x><C-f>          <C-x>f

" Toggle tagbar on and off
nnoremap <C-b>t          :TagbarToggle<CR>

#ifdef USE_YCM
nnoremap <C-b>j          :YcmCompleter GoToReferences<CR>
nnoremap <C-b>d          :YcmCompleter GoToDeclaration<CR>
nnoremap <C-b>b          :YcmCompleter GotoDefinition<CR>
nnoremap <C-b>r          :YcmCompleter RefactorRename 
#endif
#ifdef USE_LSP
nnoremap <C-b>b          :LspDefinition<CR>
nnoremap <C-b>d          :LspDeclaration<CR>
nnoremap <C-b>i          :LspImplementation<CR>
nnoremap <C-b>e          :LspDocumentDiagnostics<CR>
nnoremap <C-b>f          :LspCodeAction<CR>
nnoremap <C-b>h          :LspDocumentSwitchSourceHeader<CR>
nnoremap <C-b>j          :LspReferences<CR>
nnoremap <C-b>o          :LspPeekDeclaration<CR>
nnoremap <C-b>r          :LspRename<CR>
inoremap <exbr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
#endif
nmap <C-b><C-b>      <C-b>b

inoremap <expr> <Up> pumvisible() ? '<C-e><Up>' : '<Up>'
inoremap <expr> <Down> pumvisible() ? '<C-y><Down>' : '<Down>'

